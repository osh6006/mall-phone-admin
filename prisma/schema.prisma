// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String      @id @default(uuid())
  name        String
  userId      String
  billboards  BillBoard[] @relation("StoreToBillboard")
  categories  Category[]  @relation("StoreToCategory")
  series      Storage[]    @relation("StoreToStorage")
  color       Color[]     @relation("StoreToColor")
  products    Product[]   @relation("StoreToProduct")
  orders      Order[]     @relation("StoreToOrder")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model BillBoard{
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageURL    String
  categories  Category[] @relation("BillboardToCategory")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Category{
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   BillBoard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products    Product[]   @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Storage{
  id          String    @id   @default(uuid())
  storeId     String
  store       Store     @relation("StoreToStorage", fields: [storeId], references: [id])
  name        String
  products    Product[] @relation("StorageToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Color{
  id          String    @id   @default(uuid())
  storeId     String
  store       Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] @relation("ColorToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Product{
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  storageId   String
  storage     Storage    @relation("StorageToProduct", fields: [storageId],references: [id])
  colorId     String
  color       Color     @relation("ColorToProduct", fields: [colorId], references: [id])
  images      Image[]   @relation("ProductToImage")
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([storageId])
  @@index([colorId])
}

model Image{
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
}

model Order {
  id          String      @id @default(uuid())
  storeId     String  
  store       Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  phone       String      @default("")
  address     String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem{
  id          String      @id @default(uuid())
  orderId     String
  order       Order       @relation(fields: [orderId], references: [id])
  productId   String      
  product     Product     @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}